import type { NextPage } from 'next';
import Head from 'next/head';
import styled from 'styled-components';
import { useFetchInfinitePlanets } from 'hooks/usePlanets';
import { useCallback, useEffect, useRef } from 'react';
import Link from 'next/link';
import { PlanetProps } from 'types/planets.type';

const Container = styled.div`
  background: #242425;
  padding: 0 2rem;
`;

const MainStyled = styled.main`
  align-items: center;
  color: #999;
  display: flex;
  flex: 1;
  flex-direction: column;
  justify-content: center;
  margin: 0 auto;
  min-height: 100vh;
  padding: 4rem 0;
  width: 960px;
`;

const Card = styled.a`
  background: #1b1b1b;
  background-clip: border-box;
  border: 1px solid rgba(0, 0, 0, 0.125);
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin: 16px 0;
  padding: 16px;
  position: relative;
  word-wrap: break-word;
`;

const Footer = styled.footer`
  align-items: center;
  border-top: 1px solid #eaeaea;
  color: #fff;
  display: flex;
  flex: 1;
  justify-content: center;
  padding: 2rem 0;
`;

const Home: NextPage = () => {
  const observerElem = useRef(null);

  const { data, isLoading, hasNextPage, fetchNextPage, isFetchingNextPage } =
    useFetchInfinitePlanets();

  const handleObserver = useCallback(
    (entries) => {
      const [target] = entries;
      if (target.isIntersecting && hasNextPage) {
        fetchNextPage();
      }
    },
    [fetchNextPage, hasNextPage]
  );

  useEffect(() => {
    const element = observerElem.current;
    const option = { threshold: 0 };

    if (!element) return;

    const observer = new IntersectionObserver(handleObserver, option);
    observer.observe(element);
    return () => observer.unobserve(element);
  }, [fetchNextPage, hasNextPage, handleObserver]);

  const linkToThePlanet = (url: string) => {
    const id = url
      .split('/')
      .filter((item) => item)
      .at(-1);
    const goto = `/planet/${id}`;
    return goto;
  };

  if (isLoading) return <>Loading...</>;

  return (
    <Container>
      <Head>
        <title>Star Wars App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MainStyled>
        <h1 className="text-5xl font-bold text-yellow-600">STAR WARS</h1>

        <div className="flex gap-5 text-xl pt-5">
          <h2 className="text-white">Home</h2>
          <Link href="/wishlist">Wishlist</Link>
        </div>

        <h5 className="w-full text-2xl py-5">Planets</h5>

        <div className="w-full">
          {data?.pages[0].results.length ? (
            <>
              {data?.pages.map((page: any) =>
                page.results.map((planet: PlanetProps, index: number) => (
                  <Link href={linkToThePlanet(planet.url)} key={index} passHref>
                    <Card>
                      <h2 className="text-yellow-500 text-xl">{planet.name}</h2>
                      <p>Population - {planet.population}</p>
                      <p>Terrain - {planet.terrain}</p>
                    </Card>
                  </Link>
                ))
              )}

              <div className="text-center text-xl" ref={observerElem}>
                {isFetchingNextPage && hasNextPage ? <span>Loading planets...</span> : null}
              </div>
            </>
          ) : (
            <h1>All planets is gone!</h1>
          )}
        </div>
      </MainStyled>

      <Footer>
        <span>Made with â™¥ by Dhafa Gustiadi Kurniawan</span>
      </Footer>
    </Container>
  );
};

export default Home;
